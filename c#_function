list.Skip(1) -- skip first item of the list

-- Rollback if any error is thrown
using System.Transactions;
using TransactionScope scope = new TransactionScope(); --used to not complete a sql transaction if any error is throw in the middle, will only be completed and commited if it hits scope.complete
scope.Complete();

-- Thread stackoverflow

https://stackoverflow.com/questions/18219880/showdialog-and-ui-interaction-in-backgroundworker-thread
https://www.csharp-examples.net/create-new-thread/#:~:text=First%2C%20create%20a%20new%20ThreadStart,Finally%2C%20call%20the%20Thread.

-- Float to string examples
myFloatVariable.ToString("0.00"); //2dp Number

myFloatVariable.ToString("n2"); // 2dp Number

myFloatVariable.ToString("c2"); // 2dp currency with currency symbol

-- String

.PadLeft(2, '0') //add zero in the second position of the string if is empty starting counting on the left

-- Add custom class function to IServiceCollection
public static class ServiceCollectionExtensions
{
   public static IServiceCollection AddInfrastructure(this IServiceCollection services)
   {
       services.AddScoped<IEmployeeRepository, EmployeeRepository>();         

       return services;
   }

   public static IServiceCollection AddApplication(this IServiceCollection services)
   {
       services.AddScoped<IEmployeeService, EmployeeService>();        

       return services;
   }
}
public void ConfigureServices(IServiceCollection services)
   {
       services
           .AddApplication()
           .AddInfrastructure();

       services.AddControllers();

       services.AddSwaggerGen(c =>
       {
           c.SwaggerDoc("v1", new OpenApiInfo { Title = "ArtigoBoasPraticas.API", Version = "v1" });
       });
   }
--

----Dapper------

var teste = connection.Query<Model1, Model2, Model3, ModelReturned>(sql, (auxModel1, auxModel2, auxModel3) =>
 {
 return Model1;
},
 splitOn: "ColName1, ColName2") --where dapper should split the result of the sql to set it to a model, should always use the next element after the one you want to split
                                 -- e. colname1 starts Model2 and before it there are the elements of Model1, so to get the Model1 is necessary to split on the first element of the next model
.ToList();

 using (var valores = connection.QueryMultiple("PROCEDURE", parametros, commandType: CommandType.StoredProcedure))
                {

                    var valor1 = valores.ReadFirstOrDefault<Valores1>();
                    var valor2 = valores.ReadFirstOrDefault<Valores2>();
                    if (valor1 != null)
                        return valor1;

                    if (valor2 != null)
                        return valor2;

                    return new Exception("Valor n√£o encontrado");
                }



