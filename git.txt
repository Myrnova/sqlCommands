git checkout -b branch-name // create new branch

git checkout -b branch-name develop // create new branch from develop

git checkout stash -- . //This will restore all the files in the current directory to their stashed version.

git merge --squash --strategy-option=theirs stash // If there are changes to other files in the working directory that should be kept, here is a less heavy-handed alternative:

git checkout stash -- <paths...> //

git checkout -p stash

git stash push -- <paths...> // stash specific folder

git status

git remote // get remote branch name

git push origin "your-branch-name"

git remote add "branch-name" "link-to-repository" // add a repository to a branch

git fetch "branch-name" // donwload from the command above

git merge "secondary-branch"/"main-branch"

git branch -D "branch-name"  // delete branch

git cherry-pick <hash of commit> // Cherry pick the commit you want

git fetch -p //the -p or --prune argument will update the local database of remote branches.
git remote prune origin

This command is useful because it allows you to undo changes without having to create a new commit. Creating a new commit to undo changes would make the history of a repository less clear. 
Youâ€™d only be reverting a mistake and that does not usually need a commit of its own.Amending a commit does not just change a commit. It replaces it with a new commit which will have its own ID.
git commit --amend --no-edit // doesn't change message

git commit --amend
# follow prompts to change the commit message


-- git merge conflict
//If you're already in conflicted state, and you want to just accept all of theirs:
git checkout --theirs .
git add .

//If you want to do the opposite:
git checkout --ours .
git add .

git pull -s recursive -X theirs <remoterepo or other repo>

//If you don't want to edit the message when continuing/resuming the merge
git merge --continue --no-edit

And if you don't want to edit the message when continuing/resuming the merge:

git push -f origin branch_name

https://ohshitgit.com/

//How to squash commits in current branch
//https://stackoverflow.com/questions/6934752/combining-multiple-commits-before-pushing-in-git
git rebase -i 
// -i opens the interactive panel for a better experience