import {
  ApolloClient,
  HttpLink,
  InMemoryCache,
  NormalizedCacheObject
} from '@apollo/client'
import { useMemo } from 'react'

let apolloClient: ApolloClient<NormalizedCacheObject>

const isProd = process.env.NEXT_PUBLIC_ENV === 'production'

//differents endpoints
const externalLink = new HttpLink({
  uri: "https://externalurl.com.br"
})

const internalLink = new HttpLink({
  uri: process.env.NEXT_PUBLIC_API
})

function createApolloClient() {
  return new ApolloClient({
    ssrMode: typeof window === 'undefined',
    link: ApolloLink.split(
      (operation) => operation.getContext().url === 'internal',
      internalLink,
      externalLink
    ),
    cache: new InMemoryCache(),
    connectToDevTools: !isProd
  })
}

export function initializeApollo(initialState = {}) {
  //serve para verificar se já existe uma instância, para não criar outra
  const apolloClientGlobal = apolloClient ?? createApolloClient()

  //recupera os dados de cache
  if (initialState) {
    apolloClientGlobal.cache.restore(initialState)
  }

  //sempre inicializando no SSR com cache limpo
  if (typeof window === 'undefined') return apolloClientGlobal
  apolloClient = apolloClient ?? apolloClientGlobal

  return apolloClient
}

export function useApollo(initialState = {}) {
  const store = useMemo(() => initializeApollo(initialState), [initialState])
  return store
}